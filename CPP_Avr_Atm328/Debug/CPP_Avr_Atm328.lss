
CPP_Avr_Atm328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092d  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ff  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ff  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f9  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001de1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  8e:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <switch_On>:
	return data[symb];
}


void switch_On (int PORT,char symb){
	if(PORT != PORTC && PORT != PORTB && PORT != PORTD){
  96:	28 b1       	in	r18, 0x08	; 8
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	28 17       	cp	r18, r24
  9c:	39 07       	cpc	r19, r25
  9e:	c1 f0       	breq	.+48     	; 0xd0 <switch_On+0x3a>
  a0:	25 b1       	in	r18, 0x05	; 5
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	82 17       	cp	r24, r18
  a6:	93 07       	cpc	r25, r19
  a8:	b1 f0       	breq	.+44     	; 0xd6 <switch_On+0x40>
  aa:	2b b1       	in	r18, 0x0b	; 11
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	82 17       	cp	r24, r18
  b0:	93 07       	cpc	r25, r19
  b2:	b1 f4       	brne	.+44     	; 0xe0 <switch_On+0x4a>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	10 c0       	rjmp	.+32     	; 0xda <switch_On+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f e7       	ldi	r18, 0x7F	; 127
  bc:	3a e1       	ldi	r19, 0x1A	; 26
  be:	46 e0       	ldi	r20, 0x06	; 6
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	40 40       	sbci	r20, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <switch_On+0x2a>
  c8:	00 c0       	rjmp	.+0      	; 0xca <switch_On+0x34>
  ca:	00 00       	nop
		return;
	}
	char pins = get_pins_light(symb);
	PORT = 0b00000000;
	for(int i =0;i<8;i++){
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	05 c0       	rjmp	.+10     	; 0xda <switch_On+0x44>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <switch_On+0x44>
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	91 05       	cpc	r25, r1
  de:	6c f3       	brlt	.-38     	; 0xba <switch_On+0x24>
  e0:	08 95       	ret

000000e2 <goodLoad>:

#include "7Segment/Seven_segment.h"


void goodLoad(){
	DDRC = 0b0000011;// portC 0,1 pins in output
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00000000;
  e6:	1a b8       	out	0x0a, r1	; 10
	PORTC = 0b0000001;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	2f e3       	ldi	r18, 0x3F	; 63
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <goodLoad+0x10>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <goodLoad+0x1a>
  fc:	00 00       	nop
	_delay_ms(1000);
	PORTC = 0b0000000;
  fe:	18 b8       	out	0x08, r1	; 8
	PORTC = 0b0000010;
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	88 b9       	out	0x08, r24	; 8
 104:	2f e3       	ldi	r18, 0x3F	; 63
 106:	8d e0       	ldi	r24, 0x0D	; 13
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <goodLoad+0x28>
 112:	00 c0       	rjmp	.+0      	; 0x114 <goodLoad+0x32>
 114:	00 00       	nop
	_delay_ms(1000);
	PORTC = 0b0000000;
 116:	18 b8       	out	0x08, r1	; 8
	
	DDRC = 0b0000000;
 118:	17 b8       	out	0x07, r1	; 7
 11a:	08 95       	ret

0000011c <main>:
}


int main(void)
{
	goodLoad();
 11c:	0e 94 71 00 	call	0xe2	; 0xe2 <goodLoad>
	
	while(1){
		for(int i=0; i<= 10;i++){
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	06 c0       	rjmp	.+12     	; 0x132 <main+0x16>
			switch_On(PORTD,i);
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	6c 2f       	mov	r22, r28
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 4b 00 	call	0x96	; 0x96 <switch_On>
int main(void)
{
	goodLoad();
	
	while(1){
		for(int i=0; i<= 10;i++){
 130:	21 96       	adiw	r28, 0x01	; 1
 132:	cb 30       	cpi	r28, 0x0B	; 11
 134:	d1 05       	cpc	r29, r1
 136:	bc f3       	brlt	.-18     	; 0x126 <main+0xa>
 138:	f3 cf       	rjmp	.-26     	; 0x120 <main+0x4>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
